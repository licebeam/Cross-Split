{"version":3,"sources":["components/GameHeader.jsx","components/Split.jsx","components/Splits.jsx","core/timer.js","components/Timer.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Header","styled","div","GameHeader","props","placeholder","onChange","e","changeTitle","target","value","gameName","changePlatform","gamePlatform","changeCategory","gameCategory","Split","current","editMode","Timer","this","isCurrentSplit","disabled","split","name","updateSplitValue","id","previousTime","onClick","addSplit","index","removeSplit","Component","SplitsContainer","Array","prototype","insert","item","splice","Splits","state","splits","currentSplitIndex","cleanSplits","setState","selectedSplit","length","newSplits","filter","splitIndex","Date","now","key","map","Object","assign","nextSplit","setPrevTime","stopTimers","lastSplit","globalTime","clearSplitTimes","prevProps","currentProfile","game","globalTimerOn","globalTimerPaused","className","updateCurrentGame","TimeClass","callback","interval","maxFires","remaining","pausedTime","startTimeStamp","currentTimeStamp","count","fires","currentTime","moment","startTimestamp","stop","lastTimeFired","utcOffset","format","resetTime","startPoint","console","log","add","timerId","setInterval","proxyCallback","lastPauseTime","clearInterval","clearTimeout","resumeId","setTimeout","timeoutCallback","start","newInterval","pause","resume","newMax","TimerContainer","timerState","lastKnownTime","timer","updateTimer","updateGlobalTime","toggleGlobalTimer","toggleGlobalPause","TopBar","App","splitStartPoint","buildSaveObject","saveObject","games","find","push","saveData","localStorage","setItem","JSON","stringify","loadData","gameTitle","loadedData","parse","getItem","platform","category","padindex","gamepadIndex","onConnect","connectHandler","onDisconnect","disconnectHandler","onButtonChange","buttonChangeHandler","selected","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e42f9cc.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst GameHeader = (props) => {\n  return (\n    <Header>\n      <input\n        placeholder=\"Game\"\n        onChange={(e) => props.changeTitle(e.target.value)}\n        value={props.gameName || \"\"}\n      />\n      <input\n        placeholder=\"Platform\"\n        onChange={(e) => props.changePlatform(e.target.value)}\n        value={props.gamePlatform || \"\"}\n      />\n      <input\n        placeholder=\"Category\"\n        onChange={(e) => props.changeCategory(e.target.value)}\n        value={props.gameCategory || \"\"}\n      />\n    </Header>\n  );\n};\n\nexport default GameHeader;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst Split = styled.div`\n  display: flex;\n  height: 40px;\n  align-items: center;\n  justify-content: center;\n  transition: 0.2s all;\n  background-color: ${(props) => (props.current ? \"orange\" : \"grey\")};\n  input {\n    &:disabled {\n      background-color: ${(props) => (props.editMode ? \"purple\" : \"orange\")};\n      border: ${(props) => (props.editMode ? \"none\" : \"grey\")};\n      color: black;\n    }\n  }\n  &:hover {\n    cursor: pointer;\n  }\n  button {\n    &:hover {\n      background-color: pink;\n      color: black;\n    }\n  }\n`;\nclass Timer extends Component {\n  render() {\n    return (\n      <Split current={this.props.isCurrentSplit} editMode={this.props.editMode}>\n        <input\n          disabled={!this.props.editMode}\n          placeholder=\"Split title\"\n          value={this.props.split?.name || \"\"}\n          onChange={(e) =>\n            this.props.updateSplitValue(\n              e.target.value,\n              this.props.split.id,\n              \"name\"\n            )\n          }\n        />\n        <h1>{this.props.split?.previousTime || \"--\"}</h1>\n        {this.props.editMode ? (\n          <div>\n            <button onClick={() => this.props.addSplit(this.props.index)}>\n              Add Split ^\n            </button>\n            <button onClick={() => this.props.addSplit(this.props.index + 1)}>\n              Add Split V\n            </button>\n            <button onClick={() => this.props.removeSplit(this.props.split)}>\n              delete\n            </button>\n          </div>\n        ) : null}\n      </Split>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from \"react\";\nimport Split from \"./Split\";\nimport styled from \"styled-components\";\n\nconst SplitsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  .splits-buttons {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n  }\n`;\nArray.prototype.insert = function (index, item) {\n  return this.splice(index, 0, item);\n};\nclass Splits extends Component {\n  state = {\n    splits: [{ id: \"init-split\" }],\n    currentSplitIndex: 0,\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentProfile !== this.props.currentProfile) {\n      this.cleanSplits();\n    }\n    if (prevProps.game !== this.props.game) {\n      this.cleanSplits();\n    }\n  }\n\n  cleanSplits = () => {\n    this.setState({ splits: this.props.splits, currentSplitIndex: 0 });\n  };\n\n  removeSplit = (selectedSplit) => {\n    if (this.state?.splits?.length >= 2) {\n      const newSplits = this.state.splits?.filter(\n        (split) => split !== selectedSplit\n      );\n      this.setState({ splits: newSplits });\n    }\n  };\n\n  addSplit = (splitIndex) => {\n    let newSplits = this.state.splits;\n    //Use our array prototype to add a new split\n    newSplits.insert(splitIndex, { id: Date.now() });\n    //Re-index the array\n    newSplits.filter((item) => item);\n    this.setState({ splits: newSplits });\n  };\n\n  updateSplitValue = (value, id, key) => {\n    const newSplits = this.state.splits?.map((split) => {\n      if (split.id === id) {\n        return Object.assign({}, split, { [key]: value });\n      } else return split;\n    });\n    this.setState({ splits: newSplits });\n  };\n\n  nextSplit = () => {\n    this.setPrevTime();\n    if (this.state.currentSplitIndex >= this.state.splits?.length - 1) {\n      this.setState({ currentSplitIndex: 0 }, () => {\n        //If you finish your splits, update the startpoint to 0ms\n        this.props.stopTimers();\n      });\n    } else if (this.state.currentSplitIndex <= this.state.splits?.length - 1) {\n      this.setState({\n        currentSplitIndex: this.state.currentSplitIndex + 1,\n      });\n    }\n  };\n\n  setPrevTime = () => {\n    const lastSplit = this.state.splits[this.state.currentSplitIndex];\n    this.updateSplitValue(this.props.globalTime, lastSplit.id, \"previousTime\");\n  };\n\n  clearSplitTimes = () => {\n    const newSplits = this.state.splits?.map((split) => {\n      return Object.assign({}, split, { previousTime: null });\n    });\n    this.setState({ splits: newSplits });\n  };\n\n  render() {\n    return (\n      <SplitsContainer>\n        <div>\n          {this.state.splits?.map((split, index) => {\n            return (\n              <Split\n                editMode={this.props.editMode}\n                globalTimerOn={this.props.globalTimerOn}\n                globalTimerPaused={this.props.globalTimerPaused}\n                isCurrentSplit={index === this.state.currentSplitIndex}\n                key={split.id}\n                index={index}\n                updateSplitValue={this.updateSplitValue}\n                addSplit={this.addSplit}\n                removeSplit={this.removeSplit}\n                split={split}\n                globalTime={this.props.globalTime}\n              />\n            );\n          })}\n        </div>\n        <button\n          disabled={!this.props.globalTimerOn || this.props.globalTimerPaused}\n          onClick={() => this.nextSplit()}\n        >\n          Next Split\n        </button>\n        {this.props.editMode ? (\n          <div className=\"splits-buttons\">\n            <button\n              disabled={\n                this.props.globalTimerOn ||\n                this.props.globalTimerPaused ||\n                !this.state.splits[0]?.previousTime\n              }\n              onClick={() => this.clearSplitTimes()}\n            >\n              Clear Times\n            </button>\n            <button\n              disabled={!this.props.game?.name}\n              onClick={() => this.props.updateCurrentGame(this.state.splits)}\n            >\n              Save Splits\n            </button>\n          </div>\n        ) : null}\n      </SplitsContainer>\n    );\n  }\n}\n\nexport default Splits;\n","// I remembered seeing a neat timer class months ago on so I decided to use and modify it, found here:\n//https://stackoverflow.com/questions/24724852/pause-and-resume-setinterval\n\nimport moment from \"moment\";\n\nexport default class TimeClass {\n  constructor(name, callback, interval, maxFires = null) {\n    this.remaining = 0;\n    this.state = 0; //  0 = idle, 1 = running, 2 = paused, 3= resumed\n    this.name = name;\n    this.interval = interval; //in ms\n    this.callback = callback;\n    this.maxFires = maxFires;\n    this.pausedTime = 0; //how long we've been paused for\n    this.startTimeStamp = null;\n    this.currentTimeStamp = null;\n    this.count = 0;\n    this.fires = 0;\n    this.currentTime = \"\";\n  }\n\n  proxyCallback() {\n    //update our timer information\n    this.currentTimeStamp = moment();\n    this.count = +this.currentTimeStamp - +this.startTimestamp;\n    if (this.maxFires !== null && this.fires >= this.maxFires) {\n      this.stop();\n      return;\n    }\n    this.lastTimeFired = new Date();\n    this.fires++;\n    if (this.count > 3599999) {\n      this.currentTime = moment(this.count).utcOffset(0).format(\"HH:mm:ss.SS\");\n    } else if (this.count > 59999) {\n      this.currentTime = moment(this.count).utcOffset(0).format(\"mm:ss.SS\");\n    } else {\n      this.currentTime = moment(this.count).utcOffset(0).format(\"ss.SS\");\n    }\n    this.callback();\n  }\n\n  start(resetTime, startPoint) {\n    if (resetTime) {\n      this.startTimestamp = moment();\n    }\n    if (startPoint) {\n      console.log(startPoint, \"-=-=-=-=-= New Start Point\", this.name);\n      this.startTimestamp = moment().add(startPoint, \"milliseconds\");\n    }\n    this.timerId = setInterval(() => this.proxyCallback(), this.interval);\n    this.lastTimeFired = new Date();\n    this.state = 1;\n    this.fires = 0;\n  }\n\n  pause() {\n    if (this.state !== 1 && this.state !== 3) return;\n\n    console.log(\"Pausing Timer \" + this.name);\n\n    this.remaining =\n      this.interval - (new Date() - this.lastTimeFired) + this.pausedTime;\n    this.lastPauseTime = new Date();\n    clearInterval(this.timerId);\n    clearTimeout(this.resumeId);\n    this.state = 2;\n    this.callback();\n  }\n\n  resume() {\n    if (this.state !== 2) return;\n\n    this.pausedTime += new Date() - this.lastPauseTime;\n    console.log(`Resuming Timer ${this.name} with ${this.remaining} remaining`);\n    this.state = 3;\n    this.resumeId = setTimeout(() => this.timeoutCallback(), this.remaining);\n    this.callback();\n  }\n\n  timeoutCallback() {\n    if (this.state !== 3) return;\n\n    this.pausedTime = 0;\n    this.proxyCallback();\n    this.start(false);\n  }\n\n  stop() {\n    if (this.state === 0) return;\n\n    console.log(\n      \"Stopping Timer %s. Fired %s/%s times\",\n      this.name,\n      this.fires,\n      this.maxFires\n    );\n    clearInterval(this.timerId);\n    clearTimeout(this.resumeId);\n    this.currentTime = \"\";\n    this.state = 0;\n    this.callback();\n  }\n\n  //set a new interval to use on the next interval loop\n  setInterval(newInterval) {\n    console.log(\n      \"Changing interval from %s to %s for %s\",\n      this.interval,\n      newInterval,\n      this.name\n    );\n\n    //if we're running do a little switch-er-oo\n    if (this.state === 1) {\n      this.pause();\n      this.interval = newInterval;\n      this.resume();\n    }\n    //if we're already stopped, idle, or paused just switch it\n    else {\n      this.interval = newInterval;\n    }\n  }\n\n  setMaxFires(newMax) {\n    if (newMax !== null && this.fires >= newMax) {\n      this.stop();\n    }\n    this.maxFires = newMax;\n  }\n}\n","import React, { Component } from \"react\";\nimport TimeClass from \"../core/timer\";\n\nimport styled from \"styled-components\";\n\nconst TimerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nclass Timer extends Component {\n  state = {\n    currentTime: \"\",\n    timerState: null,\n    lastKnownTime: null,\n  };\n\n  timer = new TimeClass(\n    \"main\",\n    () => {\n      this.updateTimer();\n    },\n    10\n  );\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.globalTimerOn &&\n      !this.props.globalTimerOn &&\n      !this.props.globalTimerPaused\n    ) {\n      this.setState({ lastKnownTime: this.state.currentTime }, () => {\n        this.timer.stop();\n      });\n    }\n  }\n\n  updateTimer = () => {\n    this.setState(\n      {\n        currentTime: this.timer.currentTime,\n        timerState: this.timer.state,\n      },\n      () => {\n        this.props.updateGlobalTime(this.timer.currentTime);\n      }\n    );\n  };\n\n  render() {\n    return (\n      <TimerContainer>\n        <h1>{this.state.currentTime || this.state.lastKnownTime}</h1>\n        <button\n          disabled={this.state.timerState === 1 || this.state.timerState === 2}\n          onClick={() => {\n            this.props.toggleGlobalTimer();\n            this.timer.start(true);\n          }}\n        >\n          Start\n        </button>\n        <button\n          disabled={\n            this.state.timerState === 0 ||\n            this.state.timerState !== 1 ||\n            !this.state.timerState\n          }\n          onClick={() => {\n            this.timer.stop();\n            this.props.toggleGlobalTimer();\n          }}\n        >\n          Stop\n        </button>\n        <button\n          disabled={\n            this.state.timerState !== 1 ||\n            this.state.timerState === 2 ||\n            !this.state.timerState\n          }\n          onClick={() => {\n            this.timer.pause();\n            this.props.toggleGlobalPause();\n          }}\n        >\n          Pause\n        </button>\n        <button\n          disabled={this.state.timerState !== 2 || this.state.timerState === 3}\n          onClick={() => {\n            this.timer.resume();\n            this.props.toggleGlobalPause();\n          }}\n        >\n          Resume\n        </button>\n      </TimerContainer>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from \"react\";\nimport Gamepad from \"react-gamepad\";\nimport GameHeader from \"../components/GameHeader\";\nimport Splits from \"../components/Splits\";\nimport Timer from \"../components/Timer\";\nimport styled from \"styled-components\";\n\nconst TopBar = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nclass App extends Component {\n  state = {\n    game: null,\n    currentProfile: null,\n    globalTimerOn: false,\n    globalTimerPaused: false,\n    //Split Time:\n    splitStartPoint: 0,\n    globalTime: 0,\n    //EditMode\n    editMode: true,\n  };\n  componentDidMount() {\n    this.loadData(\"initial-game\");\n  }\n  connectHandler(padindex) {\n    console.log(`Gamepad ${padindex} connected !`);\n  }\n  disconnectHandler(gamepadIndex) {\n    console.log(`Gamepad ${gamepadIndex} disconnected !`);\n  }\n  buttonChangeHandler(gamepadIndex) {\n    console.log(\"button change\" + gamepadIndex);\n  }\n\n  toggleGlobalTimer = () => {\n    this.setState({ globalTimerOn: !this.state.globalTimerOn });\n  };\n  toggleGlobalPause = () => {\n    this.setState({ globalTimerPaused: !this.state.globalTimerPaused });\n  };\n\n  stopTimers = () => {\n    this.setState({\n      globalTimerOn: false,\n      globalTimerPaused: false,\n    });\n  };\n\n  updateGlobalTime = (value) => {\n    this.setState({\n      globalTime: value,\n    });\n  };\n\n  buildSaveObject = () => {\n    let saveObject = {\n      games: this.state.currentProfile?.games || [],\n    };\n    saveObject.games = saveObject.games.filter(\n      (game) => game.name !== this.state.game.name\n    );\n    if (!saveObject.games.find((game) => game.name === this.state.game.name)) {\n      saveObject.games.push(this.state.game);\n    }\n    return saveObject;\n  };\n\n  saveData = () => {\n    const saveObject = this.buildSaveObject();\n    localStorage.setItem(\"profileSave\", JSON.stringify(saveObject));\n    this.loadData(this.state.game.name);\n  };\n\n  loadData = (gameTitle) => {\n    console.log(\"loading - \" + gameTitle);\n    const loadedData = JSON.parse(localStorage.getItem(\"profileSave\"));\n    this.setState(\n      {\n        currentProfile: loadedData,\n        game: null,\n      },\n      () => {\n        console.log(loadedData);\n        this.setState({\n          game: this.state.currentProfile?.games?.find(\n            (game) => game.name === gameTitle\n          ),\n        });\n      }\n    );\n  };\n\n  updateCurrentGame = (splits) => {\n    this.setState(\n      {\n        game: Object.assign({}, this.state.game, { splits }),\n      },\n      () => {\n        this.saveData();\n      }\n    );\n  };\n\n  //Header functions\n  changeTitle = (value) => {\n    this.setState({\n      game: Object.assign({}, this.state.game, { name: value }),\n    });\n  };\n  changePlatform = (value) => {\n    this.setState({\n      game: Object.assign({}, this.state.game, { platform: value }),\n    });\n  };\n  changeCategory = (value) => {\n    this.setState({\n      game: Object.assign({}, this.state.game, { category: value }),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Gamepad\n          onConnect={this.connectHandler}\n          onDisconnect={this.disconnectHandler}\n          onButtonChange={this.buttonChangeHandler}\n        >\n          <></>\n        </Gamepad>\n        <TopBar>\n          <select\n            placeholder=\"Select Game\"\n            disabled={!this.state.currentProfile?.games?.length}\n            onChange={(e) => this.loadData(e.target.value)}\n          >\n            <option selected=\"selected\">Select a Game</option>\n            {this.state.currentProfile?.games?.map((game) => {\n              return <option key={game.name}>{game.name}</option>;\n            })}\n          </select>\n          <button\n            onClick={() => this.setState({ editMode: !this.state.editMode })}\n          >\n            Edit Mode\n          </button>\n        </TopBar>\n        <GameHeader\n          changeCategory={this.changeCategory}\n          changeTitle={this.changeTitle}\n          changePlatform={this.changePlatform}\n          gamePlatform={this.state.game?.platform || \"\"}\n          gameCategory={this.state.game?.category || \"\"}\n          gameName={this.state.game?.name || \"\"}\n        />\n        <Splits\n          editMode={this.state.editMode}\n          currentProfile={this.state.currentProfile}\n          game={this.state.game}\n          updateCurrentGame={this.updateCurrentGame}\n          globalTime={this.state.globalTime}\n          stopTimers={this.stopTimers}\n          toggleGlobalTimer={this.toggleGlobalTimer}\n          toggleGlobalPause={this.toggleGlobalPause}\n          globalTimerOn={this.state.globalTimerOn}\n          globalTimerPaused={this.state.globalTimerPaused}\n          splits={this.state.game?.splits || [{ id: \"init-split\" }]}\n        />\n        <Timer\n          updateGlobalTime={this.updateGlobalTime}\n          toggleGlobalTimer={this.toggleGlobalTimer}\n          toggleGlobalPause={this.toggleGlobalPause}\n          globalTimerOn={this.state.globalTimerOn}\n          globalTimerPaused={this.state.globalTimerPaused}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}