{"version":3,"sources":["components/GameHeader.jsx","components/Split.jsx","components/Splits.jsx","core/timer.js","components/Timer.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["GameHeader","props","onChange","e","changeTitle","target","value","gameName","changePlatform","gamePlatform","Timer","this","index","isCurrentSplit","onClick","addSplit","split","previousTime","name","updateSplitValue","id","removeSplit","Component","Array","prototype","insert","item","splice","Splits","state","splits","currentSplitIndex","cleanSplits","setState","selectedSplit","newSplits","filter","splitIndex","Date","now","key","map","Object","assign","nextSplit","setPrevTime","length","stopTimers","lastSplit","globalTime","clearSplitTimes","prevProps","currentProfile","game","Split","globalTimerOn","globalTimerPaused","disabled","updateCurrentGame","TimeClass","callback","interval","maxFires","remaining","pausedTime","startTimeStamp","currentTimeStamp","count","fires","currentTime","moment","startTimestamp","stop","lastTimeFired","utcOffset","format","resetTime","startPoint","console","log","add","timerId","setInterval","proxyCallback","lastPauseTime","clearInterval","clearTimeout","resumeId","setTimeout","timeoutCallback","start","newInterval","pause","resume","newMax","timerState","lastKnownTime","timer","updateTimer","updateGlobalTime","toggleGlobalTimer","toggleGlobalPause","App","splitStartPoint","buildSaveObject","saveObject","games","find","push","saveData","localStorage","setItem","JSON","stringify","loadData","gameTitle","loadedData","parse","getItem","platform","padindex","gamepadIndex","className","onConnect","connectHandler","onDisconnect","disconnectHandler","onButtonChange","buttonChangeHandler","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.db03035a.chunk.js","sourcesContent":["import React from \"react\";\n\nconst GameHeader = (props) => {\n  return (\n    <div>\n      <input\n        onChange={(e) => props.changeTitle(e.target.value)}\n        value={props.gameName || \"\"}\n      />\n      <input\n        onChange={(e) => props.changePlatform(e.target.value)}\n        value={props.gamePlatform || \"\"}\n      />\n    </div>\n  );\n};\n\nexport default GameHeader;\n","import React, { Component } from \"react\";\n\nclass Timer extends Component {\n  render() {\n    return (\n      <div>\n        {this.props.index}\n        {this.props.isCurrentSplit ? <span>current</span> : <span></span>}\n        <button onClick={() => this.props.addSplit(this.props.index)}>\n          Add Split\n        </button>\n        <span>{this.props.split?.previousTime || \"--\"}</span>\n        <input\n          value={this.props.split?.name || \"\"}\n          onChange={(e) =>\n            this.props.updateSplitValue(\n              e.target.value,\n              this.props.split.id,\n              \"name\"\n            )\n          }\n        />\n        <button onClick={() => this.props.removeSplit(this.props.split)}>\n          delete\n        </button>\n        <button onClick={() => this.props.addSplit(this.props.index + 1)}>\n          Add Split\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from \"react\";\nimport Split from \"./Split\";\nArray.prototype.insert = function (index, item) {\n  return this.splice(index, 0, item);\n};\nclass Splits extends Component {\n  state = {\n    splits: [{ id: \"init-split\" }],\n    currentSplitIndex: 0,\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentProfile !== this.props.currentProfile) {\n      this.cleanSplits();\n    }\n    if (prevProps.game !== this.props.game) {\n      this.cleanSplits();\n    }\n  }\n\n  cleanSplits = () => {\n    this.setState({ splits: this.props.splits, currentSplitIndex: 0 });\n  };\n\n  removeSplit = (selectedSplit) => {\n    const newSplits = this.state.splits?.filter(\n      (split) => split !== selectedSplit\n    );\n    this.setState({ splits: newSplits });\n  };\n\n  addSplit = (splitIndex) => {\n    let newSplits = this.state.splits;\n    //Use our array prototype to add a new split\n    newSplits.insert(splitIndex, { id: Date.now() });\n    //Re-index the array\n    newSplits.filter((item) => item);\n    this.setState({ splits: newSplits });\n  };\n\n  updateSplitValue = (value, id, key) => {\n    const newSplits = this.state.splits?.map((split) => {\n      if (split.id === id) {\n        return Object.assign({}, split, { [key]: value });\n      } else return split;\n    });\n    this.setState({ splits: newSplits });\n  };\n\n  nextSplit = () => {\n    this.setPrevTime();\n    if (this.state.currentSplitIndex >= this.state.splits?.length - 1) {\n      this.setState({ currentSplitIndex: 0 }, () => {\n        //If you finish your splits, update the startpoint to 0ms\n        this.props.stopTimers();\n      });\n    } else if (this.state.currentSplitIndex <= this.state.splits?.length - 1) {\n      this.setState({\n        currentSplitIndex: this.state.currentSplitIndex + 1,\n      });\n    }\n  };\n\n  setPrevTime = () => {\n    const lastSplit = this.state.splits[this.state.currentSplitIndex];\n    this.updateSplitValue(this.props.globalTime, lastSplit.id, \"previousTime\");\n  };\n\n  clearSplitTimes = () => {\n    const newSplits = this.state.splits?.map((split) => {\n      return Object.assign({}, split, { previousTime: null });\n    });\n    this.setState({ splits: newSplits });\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          {this.state.splits?.map((split, index) => {\n            return (\n              <Split\n                globalTimerOn={this.props.globalTimerOn}\n                globalTimerPaused={this.props.globalTimerPaused}\n                isCurrentSplit={index === this.state.currentSplitIndex}\n                key={split.id}\n                index={index}\n                updateSplitValue={this.updateSplitValue}\n                addSplit={this.addSplit}\n                removeSplit={this.removeSplit}\n                split={split}\n                globalTime={this.props.globalTime}\n              />\n            );\n          })}\n        </div>\n        <button\n          disabled={!this.props.globalTimerOn || this.props.globalTimerPaused}\n          onClick={() => this.nextSplit()}\n        >\n          Next Split\n        </button>\n        <button\n          disabled={this.props.globalTimerOn || this.props.globalTimerPaused}\n          onClick={() => this.clearSplitTimes()}\n        >\n          Clear Times\n        </button>\n        <button\n          disabled={!this.props.game?.name}\n          onClick={() => this.props.updateCurrentGame(this.state.splits)}\n        >\n          Save Splits\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Splits;\n","// I remembered seeing a neat timer class months ago on so I decided to use and modify it, found here:\n//https://stackoverflow.com/questions/24724852/pause-and-resume-setinterval\n\nimport moment from \"moment\";\n\nexport default class TimeClass {\n  constructor(name, callback, interval, maxFires = null) {\n    this.remaining = 0;\n    this.state = 0; //  0 = idle, 1 = running, 2 = paused, 3= resumed\n    this.name = name;\n    this.interval = interval; //in ms\n    this.callback = callback;\n    this.maxFires = maxFires;\n    this.pausedTime = 0; //how long we've been paused for\n    this.startTimeStamp = null;\n    this.currentTimeStamp = null;\n    this.count = 0;\n    this.fires = 0;\n    this.currentTime = \"\";\n  }\n\n  proxyCallback() {\n    //update our timer information\n    this.currentTimeStamp = moment();\n    this.count = +this.currentTimeStamp - +this.startTimestamp;\n    if (this.maxFires !== null && this.fires >= this.maxFires) {\n      this.stop();\n      return;\n    }\n    this.lastTimeFired = new Date();\n    this.fires++;\n    this.currentTime = moment(this.count).utcOffset(0).format(\"HH:mm:ss.SS\");\n    this.callback();\n  }\n\n  start(resetTime, startPoint) {\n    if (resetTime) {\n      this.startTimestamp = moment();\n    }\n    if (startPoint) {\n      console.log(startPoint, \"-=-=-=-=-= New Start Point\", this.name);\n      this.startTimestamp = moment().add(startPoint, \"milliseconds\");\n    }\n    this.timerId = setInterval(() => this.proxyCallback(), this.interval);\n    this.lastTimeFired = new Date();\n    this.state = 1;\n    this.fires = 0;\n  }\n\n  pause() {\n    if (this.state !== 1 && this.state !== 3) return;\n\n    console.log(\"Pausing Timer \" + this.name);\n\n    this.remaining =\n      this.interval - (new Date() - this.lastTimeFired) + this.pausedTime;\n    this.lastPauseTime = new Date();\n    clearInterval(this.timerId);\n    clearTimeout(this.resumeId);\n    this.state = 2;\n    this.callback();\n  }\n\n  resume() {\n    if (this.state !== 2) return;\n\n    this.pausedTime += new Date() - this.lastPauseTime;\n    console.log(`Resuming Timer ${this.name} with ${this.remaining} remaining`);\n    this.state = 3;\n    this.resumeId = setTimeout(() => this.timeoutCallback(), this.remaining);\n    this.callback();\n  }\n\n  timeoutCallback() {\n    if (this.state !== 3) return;\n\n    this.pausedTime = 0;\n    this.proxyCallback();\n    this.start(false);\n  }\n\n  stop() {\n    if (this.state === 0) return;\n\n    console.log(\n      \"Stopping Timer %s. Fired %s/%s times\",\n      this.name,\n      this.fires,\n      this.maxFires\n    );\n    clearInterval(this.timerId);\n    clearTimeout(this.resumeId);\n    this.currentTime = \"\";\n    this.state = 0;\n    this.callback();\n  }\n\n  //set a new interval to use on the next interval loop\n  setInterval(newInterval) {\n    console.log(\n      \"Changing interval from %s to %s for %s\",\n      this.interval,\n      newInterval,\n      this.name\n    );\n\n    //if we're running do a little switch-er-oo\n    if (this.state === 1) {\n      this.pause();\n      this.interval = newInterval;\n      this.resume();\n    }\n    //if we're already stopped, idle, or paused just switch it\n    else {\n      this.interval = newInterval;\n    }\n  }\n\n  setMaxFires(newMax) {\n    if (newMax !== null && this.fires >= newMax) {\n      this.stop();\n    }\n    this.maxFires = newMax;\n  }\n}\n","import React, { Component } from \"react\";\nimport TimeClass from \"../core/timer\";\n\nclass Timer extends Component {\n  state = {\n    currentTime: \"\",\n    timerState: null,\n    lastKnownTime: null,\n  };\n\n  timer = new TimeClass(\n    \"main\",\n    () => {\n      this.updateTimer();\n    },\n    10\n  );\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.globalTimerOn &&\n      !this.props.globalTimerOn &&\n      !this.props.globalTimerPaused\n    ) {\n      this.setState({ lastKnownTime: this.state.currentTime }, () => {\n        this.timer.stop();\n      });\n    }\n  }\n\n  updateTimer = () => {\n    this.setState(\n      {\n        currentTime: this.timer.currentTime,\n        timerState: this.timer.state,\n      },\n      () => {\n        this.props.updateGlobalTime(this.timer.currentTime);\n      }\n    );\n  };\n\n  render() {\n    return (\n      <div>\n        <span>{this.state.currentTime || this.state.lastKnownTime}</span>\n        <button\n          disabled={this.state.timerState === 1 || this.state.timerState === 2}\n          onClick={() => {\n            this.props.toggleGlobalTimer();\n            this.timer.start(true);\n          }}\n        >\n          Start\n        </button>\n        <button\n          disabled={\n            this.state.timerState === 0 ||\n            this.state.timerState !== 1 ||\n            !this.state.timerState\n          }\n          onClick={() => {\n            this.timer.stop();\n            this.props.toggleGlobalTimer();\n          }}\n        >\n          Stop\n        </button>\n        <button\n          disabled={\n            this.state.timerState !== 1 ||\n            this.state.timerState === 2 ||\n            !this.state.timerState\n          }\n          onClick={() => {\n            this.timer.pause();\n            this.props.toggleGlobalPause();\n          }}\n        >\n          Pause\n        </button>\n        <button\n          disabled={this.state.timerState !== 2 || this.state.timerState === 3}\n          onClick={() => {\n            this.timer.resume();\n            this.props.toggleGlobalPause();\n          }}\n        >\n          Resume\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from \"react\";\nimport Gamepad from \"react-gamepad\";\nimport GameHeader from \"../components/GameHeader\";\nimport Splits from \"../components/Splits\";\nimport Timer from \"../components/Timer\";\nclass App extends Component {\n  state = {\n    game: null,\n    currentProfile: null,\n    globalTimerOn: false,\n    globalTimerPaused: false,\n    //Split Time:\n    splitStartPoint: 0,\n    globalTime: 0,\n  };\n  componentDidMount() {\n    this.loadData(\"initial-game\");\n  }\n  connectHandler(padindex) {\n    console.log(`Gamepad ${padindex} connected !`);\n  }\n  disconnectHandler(gamepadIndex) {\n    console.log(`Gamepad ${gamepadIndex} disconnected !`);\n  }\n  buttonChangeHandler(gamepadIndex) {\n    console.log(\"button change\" + gamepadIndex);\n  }\n\n  toggleGlobalTimer = () => {\n    this.setState({ globalTimerOn: !this.state.globalTimerOn });\n  };\n  toggleGlobalPause = () => {\n    this.setState({ globalTimerPaused: !this.state.globalTimerPaused });\n  };\n\n  stopTimers = () => {\n    this.setState({\n      globalTimerOn: false,\n      globalTimerPaused: false,\n    });\n  };\n\n  updateGlobalTime = (value) => {\n    this.setState({\n      globalTime: value,\n    });\n  };\n\n  buildSaveObject = () => {\n    let saveObject = {\n      games: this.state.currentProfile?.games || [],\n    };\n    saveObject.games = saveObject.games.filter(\n      (game) => game.name !== this.state.game.name\n    );\n    if (!saveObject.games.find((game) => game.name === this.state.game.name)) {\n      saveObject.games.push(this.state.game);\n    }\n    return saveObject;\n  };\n\n  saveData = () => {\n    const saveObject = this.buildSaveObject();\n    localStorage.setItem(\"profileSave\", JSON.stringify(saveObject));\n    this.loadData(this.state.game.name);\n  };\n\n  loadData = (gameTitle) => {\n    console.log(\"loading - \" + gameTitle);\n    const loadedData = JSON.parse(localStorage.getItem(\"profileSave\"));\n    this.setState(\n      {\n        currentProfile: loadedData,\n        game: null,\n      },\n      () => {\n        console.log(loadedData);\n        this.setState({\n          game: this.state.currentProfile?.games?.find(\n            (game) => game.name === gameTitle\n          ),\n        });\n      }\n    );\n  };\n\n  updateCurrentGame = (splits) => {\n    this.setState(\n      {\n        game: Object.assign({}, this.state.game, { splits }),\n      },\n      () => {\n        this.saveData();\n      }\n    );\n  };\n\n  //Header functions\n  changeTitle = (value) => {\n    this.setState({\n      game: Object.assign({}, this.state.game, { name: value }),\n    });\n  };\n  changePlatform = (value) => {\n    this.setState({\n      game: Object.assign({}, this.state.game, { platform: value }),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Gamepad\n          onConnect={this.connectHandler}\n          onDisconnect={this.disconnectHandler}\n          onButtonChange={this.buttonChangeHandler}\n        >\n          <></>\n        </Gamepad>\n        <span>Everything will go here.</span>\n        <GameHeader\n          changeTitle={this.changeTitle}\n          changePlatform={this.changePlatform}\n          gamePlatform={this.state.game?.platform || \"\"}\n          gameName={this.state.game?.name || \"\"}\n        />\n        <select onChange={(e) => this.loadData(e.target.value)}>\n          {this.state.currentProfile?.games?.map((game) => {\n            return <option key={game.name}>{game.name}</option>;\n          })}\n        </select>\n        <Splits\n          currentProfile={this.state.currentProfile}\n          game={this.state.game}\n          updateCurrentGame={this.updateCurrentGame}\n          globalTime={this.state.globalTime}\n          stopTimers={this.stopTimers}\n          toggleGlobalTimer={this.toggleGlobalTimer}\n          toggleGlobalPause={this.toggleGlobalPause}\n          globalTimerOn={this.state.globalTimerOn}\n          globalTimerPaused={this.state.globalTimerPaused}\n          splits={this.state.game?.splits || [{ id: \"init-split\" }]}\n        />\n        <Timer\n          updateGlobalTime={this.updateGlobalTime}\n          toggleGlobalTimer={this.toggleGlobalTimer}\n          toggleGlobalPause={this.toggleGlobalPause}\n          globalTimerOn={this.state.globalTimerOn}\n          globalTimerPaused={this.state.globalTimerPaused}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}