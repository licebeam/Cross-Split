{"version":3,"sources":["components/GameHeader.jsx","components/Split.jsx","components/Splits.jsx","core/timer.js","components/Timer.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Header","styled","div","GameHeader","props","placeholder","onChange","e","changeTitle","target","value","gameName","changePlatform","gamePlatform","changeCategory","gameCategory","Split","Timer","this","split","name","updateSplitValue","id","previousTime","onClick","addSplit","index","removeSplit","Component","SplitsContainer","Array","prototype","insert","item","splice","Splits","state","splits","currentSplitIndex","cleanSplits","setState","selectedSplit","newSplits","filter","splitIndex","Date","now","key","map","Object","assign","nextSplit","setPrevTime","length","stopTimers","lastSplit","globalTime","clearSplitTimes","prevProps","currentProfile","game","globalTimerOn","globalTimerPaused","isCurrentSplit","disabled","updateCurrentGame","TimeClass","callback","interval","maxFires","remaining","pausedTime","startTimeStamp","currentTimeStamp","count","fires","currentTime","moment","startTimestamp","stop","lastTimeFired","utcOffset","format","resetTime","startPoint","console","log","add","timerId","setInterval","proxyCallback","lastPauseTime","clearInterval","clearTimeout","resumeId","setTimeout","timeoutCallback","start","newInterval","pause","resume","newMax","TimerContainer","timerState","lastKnownTime","timer","updateTimer","updateGlobalTime","toggleGlobalTimer","toggleGlobalPause","TopBar","App","splitStartPoint","buildSaveObject","saveObject","games","find","push","saveData","localStorage","setItem","JSON","stringify","loadData","gameTitle","loadedData","parse","getItem","platform","category","padindex","gamepadIndex","className","onConnect","connectHandler","onDisconnect","disconnectHandler","onButtonChange","buttonChangeHandler","selected","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f290cf4f.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\n\nconst Header = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nconst GameHeader = (props) => {\n  return (\n    <Header>\n      <input\n        placeholder=\"Game\"\n        onChange={(e) => props.changeTitle(e.target.value)}\n        value={props.gameName || \"\"}\n      />\n      <input\n        placeholder=\"Platform\"\n        onChange={(e) => props.changePlatform(e.target.value)}\n        value={props.gamePlatform || \"\"}\n      />\n      <input\n        placeholder=\"Category\"\n        onChange={(e) => props.changeCategory(e.target.value)}\n        value={props.gameCategory || \"\"}\n      />\n    </Header>\n  );\n};\n\nexport default GameHeader;\n","import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst Split = styled.div`\n  display: flex;\n  height: 40px;\n  align-items: center;\n  justify-content: center;\n`;\nclass Timer extends Component {\n  render() {\n    return (\n      <Split>\n        {/* {this.props.isCurrentSplit ? <span>current</span> : <span></span>} */}\n\n        <input\n          placeholder=\"Split title\"\n          value={this.props.split?.name || \"\"}\n          onChange={(e) =>\n            this.props.updateSplitValue(\n              e.target.value,\n              this.props.split.id,\n              \"name\"\n            )\n          }\n        />\n        <h1>{this.props.split?.previousTime || \"--\"}</h1>\n        <button onClick={() => this.props.addSplit(this.props.index)}>\n          Add Split ^\n        </button>\n        <button onClick={() => this.props.addSplit(this.props.index + 1)}>\n          Add Split V\n        </button>\n        <button onClick={() => this.props.removeSplit(this.props.split)}>\n          delete\n        </button>\n      </Split>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from \"react\";\nimport Split from \"./Split\";\nimport styled from \"styled-components\";\n\nconst SplitsContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nArray.prototype.insert = function (index, item) {\n  return this.splice(index, 0, item);\n};\nclass Splits extends Component {\n  state = {\n    splits: [{ id: \"init-split\" }],\n    currentSplitIndex: 0,\n  };\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentProfile !== this.props.currentProfile) {\n      this.cleanSplits();\n    }\n    if (prevProps.game !== this.props.game) {\n      this.cleanSplits();\n    }\n  }\n\n  cleanSplits = () => {\n    this.setState({ splits: this.props.splits, currentSplitIndex: 0 });\n  };\n\n  removeSplit = (selectedSplit) => {\n    const newSplits = this.state.splits?.filter(\n      (split) => split !== selectedSplit\n    );\n    this.setState({ splits: newSplits });\n  };\n\n  addSplit = (splitIndex) => {\n    let newSplits = this.state.splits;\n    //Use our array prototype to add a new split\n    newSplits.insert(splitIndex, { id: Date.now() });\n    //Re-index the array\n    newSplits.filter((item) => item);\n    this.setState({ splits: newSplits });\n  };\n\n  updateSplitValue = (value, id, key) => {\n    const newSplits = this.state.splits?.map((split) => {\n      if (split.id === id) {\n        return Object.assign({}, split, { [key]: value });\n      } else return split;\n    });\n    this.setState({ splits: newSplits });\n  };\n\n  nextSplit = () => {\n    this.setPrevTime();\n    if (this.state.currentSplitIndex >= this.state.splits?.length - 1) {\n      this.setState({ currentSplitIndex: 0 }, () => {\n        //If you finish your splits, update the startpoint to 0ms\n        this.props.stopTimers();\n      });\n    } else if (this.state.currentSplitIndex <= this.state.splits?.length - 1) {\n      this.setState({\n        currentSplitIndex: this.state.currentSplitIndex + 1,\n      });\n    }\n  };\n\n  setPrevTime = () => {\n    const lastSplit = this.state.splits[this.state.currentSplitIndex];\n    this.updateSplitValue(this.props.globalTime, lastSplit.id, \"previousTime\");\n  };\n\n  clearSplitTimes = () => {\n    const newSplits = this.state.splits?.map((split) => {\n      return Object.assign({}, split, { previousTime: null });\n    });\n    this.setState({ splits: newSplits });\n  };\n\n  render() {\n    return (\n      <SplitsContainer>\n        <div>\n          {this.state.splits?.map((split, index) => {\n            return (\n              <Split\n                globalTimerOn={this.props.globalTimerOn}\n                globalTimerPaused={this.props.globalTimerPaused}\n                isCurrentSplit={index === this.state.currentSplitIndex}\n                key={split.id}\n                index={index}\n                updateSplitValue={this.updateSplitValue}\n                addSplit={this.addSplit}\n                removeSplit={this.removeSplit}\n                split={split}\n                globalTime={this.props.globalTime}\n              />\n            );\n          })}\n        </div>\n        <button\n          disabled={!this.props.globalTimerOn || this.props.globalTimerPaused}\n          onClick={() => this.nextSplit()}\n        >\n          Next Split\n        </button>\n        <button\n          disabled={\n            this.props.globalTimerOn ||\n            this.props.globalTimerPaused ||\n            !this.state.splits[0]?.previousTime\n          }\n          onClick={() => this.clearSplitTimes()}\n        >\n          Clear Times\n        </button>\n        <button\n          disabled={!this.props.game?.name}\n          onClick={() => this.props.updateCurrentGame(this.state.splits)}\n        >\n          Save Splits\n        </button>\n      </SplitsContainer>\n    );\n  }\n}\n\nexport default Splits;\n","// I remembered seeing a neat timer class months ago on so I decided to use and modify it, found here:\n//https://stackoverflow.com/questions/24724852/pause-and-resume-setinterval\n\nimport moment from \"moment\";\n\nexport default class TimeClass {\n  constructor(name, callback, interval, maxFires = null) {\n    this.remaining = 0;\n    this.state = 0; //  0 = idle, 1 = running, 2 = paused, 3= resumed\n    this.name = name;\n    this.interval = interval; //in ms\n    this.callback = callback;\n    this.maxFires = maxFires;\n    this.pausedTime = 0; //how long we've been paused for\n    this.startTimeStamp = null;\n    this.currentTimeStamp = null;\n    this.count = 0;\n    this.fires = 0;\n    this.currentTime = \"\";\n  }\n\n  proxyCallback() {\n    //update our timer information\n    this.currentTimeStamp = moment();\n    this.count = +this.currentTimeStamp - +this.startTimestamp;\n    if (this.maxFires !== null && this.fires >= this.maxFires) {\n      this.stop();\n      return;\n    }\n    this.lastTimeFired = new Date();\n    this.fires++;\n    if (this.count > 3599999) {\n      this.currentTime = moment(this.count).utcOffset(0).format(\"HH:mm:ss.SS\");\n    } else if (this.count > 59999) {\n      this.currentTime = moment(this.count).utcOffset(0).format(\"mm:ss.SS\");\n    } else {\n      this.currentTime = moment(this.count).utcOffset(0).format(\"ss.SS\");\n    }\n    this.callback();\n  }\n\n  start(resetTime, startPoint) {\n    if (resetTime) {\n      this.startTimestamp = moment();\n    }\n    if (startPoint) {\n      console.log(startPoint, \"-=-=-=-=-= New Start Point\", this.name);\n      this.startTimestamp = moment().add(startPoint, \"milliseconds\");\n    }\n    this.timerId = setInterval(() => this.proxyCallback(), this.interval);\n    this.lastTimeFired = new Date();\n    this.state = 1;\n    this.fires = 0;\n  }\n\n  pause() {\n    if (this.state !== 1 && this.state !== 3) return;\n\n    console.log(\"Pausing Timer \" + this.name);\n\n    this.remaining =\n      this.interval - (new Date() - this.lastTimeFired) + this.pausedTime;\n    this.lastPauseTime = new Date();\n    clearInterval(this.timerId);\n    clearTimeout(this.resumeId);\n    this.state = 2;\n    this.callback();\n  }\n\n  resume() {\n    if (this.state !== 2) return;\n\n    this.pausedTime += new Date() - this.lastPauseTime;\n    console.log(`Resuming Timer ${this.name} with ${this.remaining} remaining`);\n    this.state = 3;\n    this.resumeId = setTimeout(() => this.timeoutCallback(), this.remaining);\n    this.callback();\n  }\n\n  timeoutCallback() {\n    if (this.state !== 3) return;\n\n    this.pausedTime = 0;\n    this.proxyCallback();\n    this.start(false);\n  }\n\n  stop() {\n    if (this.state === 0) return;\n\n    console.log(\n      \"Stopping Timer %s. Fired %s/%s times\",\n      this.name,\n      this.fires,\n      this.maxFires\n    );\n    clearInterval(this.timerId);\n    clearTimeout(this.resumeId);\n    this.currentTime = \"\";\n    this.state = 0;\n    this.callback();\n  }\n\n  //set a new interval to use on the next interval loop\n  setInterval(newInterval) {\n    console.log(\n      \"Changing interval from %s to %s for %s\",\n      this.interval,\n      newInterval,\n      this.name\n    );\n\n    //if we're running do a little switch-er-oo\n    if (this.state === 1) {\n      this.pause();\n      this.interval = newInterval;\n      this.resume();\n    }\n    //if we're already stopped, idle, or paused just switch it\n    else {\n      this.interval = newInterval;\n    }\n  }\n\n  setMaxFires(newMax) {\n    if (newMax !== null && this.fires >= newMax) {\n      this.stop();\n    }\n    this.maxFires = newMax;\n  }\n}\n","import React, { Component } from \"react\";\nimport TimeClass from \"../core/timer\";\n\nimport styled from \"styled-components\";\n\nconst TimerContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nclass Timer extends Component {\n  state = {\n    currentTime: \"\",\n    timerState: null,\n    lastKnownTime: null,\n  };\n\n  timer = new TimeClass(\n    \"main\",\n    () => {\n      this.updateTimer();\n    },\n    10\n  );\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.globalTimerOn &&\n      !this.props.globalTimerOn &&\n      !this.props.globalTimerPaused\n    ) {\n      this.setState({ lastKnownTime: this.state.currentTime }, () => {\n        this.timer.stop();\n      });\n    }\n  }\n\n  updateTimer = () => {\n    this.setState(\n      {\n        currentTime: this.timer.currentTime,\n        timerState: this.timer.state,\n      },\n      () => {\n        this.props.updateGlobalTime(this.timer.currentTime);\n      }\n    );\n  };\n\n  render() {\n    return (\n      <TimerContainer>\n        <h1>{this.state.currentTime || this.state.lastKnownTime}</h1>\n        <button\n          disabled={this.state.timerState === 1 || this.state.timerState === 2}\n          onClick={() => {\n            this.props.toggleGlobalTimer();\n            this.timer.start(true);\n          }}\n        >\n          Start\n        </button>\n        <button\n          disabled={\n            this.state.timerState === 0 ||\n            this.state.timerState !== 1 ||\n            !this.state.timerState\n          }\n          onClick={() => {\n            this.timer.stop();\n            this.props.toggleGlobalTimer();\n          }}\n        >\n          Stop\n        </button>\n        <button\n          disabled={\n            this.state.timerState !== 1 ||\n            this.state.timerState === 2 ||\n            !this.state.timerState\n          }\n          onClick={() => {\n            this.timer.pause();\n            this.props.toggleGlobalPause();\n          }}\n        >\n          Pause\n        </button>\n        <button\n          disabled={this.state.timerState !== 2 || this.state.timerState === 3}\n          onClick={() => {\n            this.timer.resume();\n            this.props.toggleGlobalPause();\n          }}\n        >\n          Resume\n        </button>\n      </TimerContainer>\n    );\n  }\n}\n\nexport default Timer;\n","import React, { Component } from \"react\";\nimport Gamepad from \"react-gamepad\";\nimport GameHeader from \"../components/GameHeader\";\nimport Splits from \"../components/Splits\";\nimport Timer from \"../components/Timer\";\nimport styled from \"styled-components\";\n\nconst TopBar = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\nclass App extends Component {\n  state = {\n    game: null,\n    currentProfile: null,\n    globalTimerOn: false,\n    globalTimerPaused: false,\n    //Split Time:\n    splitStartPoint: 0,\n    globalTime: 0,\n  };\n  componentDidMount() {\n    this.loadData(\"initial-game\");\n  }\n  connectHandler(padindex) {\n    console.log(`Gamepad ${padindex} connected !`);\n  }\n  disconnectHandler(gamepadIndex) {\n    console.log(`Gamepad ${gamepadIndex} disconnected !`);\n  }\n  buttonChangeHandler(gamepadIndex) {\n    console.log(\"button change\" + gamepadIndex);\n  }\n\n  toggleGlobalTimer = () => {\n    this.setState({ globalTimerOn: !this.state.globalTimerOn });\n  };\n  toggleGlobalPause = () => {\n    this.setState({ globalTimerPaused: !this.state.globalTimerPaused });\n  };\n\n  stopTimers = () => {\n    this.setState({\n      globalTimerOn: false,\n      globalTimerPaused: false,\n    });\n  };\n\n  updateGlobalTime = (value) => {\n    this.setState({\n      globalTime: value,\n    });\n  };\n\n  buildSaveObject = () => {\n    let saveObject = {\n      games: this.state.currentProfile?.games || [],\n    };\n    saveObject.games = saveObject.games.filter(\n      (game) => game.name !== this.state.game.name\n    );\n    if (!saveObject.games.find((game) => game.name === this.state.game.name)) {\n      saveObject.games.push(this.state.game);\n    }\n    return saveObject;\n  };\n\n  saveData = () => {\n    const saveObject = this.buildSaveObject();\n    localStorage.setItem(\"profileSave\", JSON.stringify(saveObject));\n    this.loadData(this.state.game.name);\n  };\n\n  loadData = (gameTitle) => {\n    console.log(\"loading - \" + gameTitle);\n    const loadedData = JSON.parse(localStorage.getItem(\"profileSave\"));\n    this.setState(\n      {\n        currentProfile: loadedData,\n        game: null,\n      },\n      () => {\n        console.log(loadedData);\n        this.setState({\n          game: this.state.currentProfile?.games?.find(\n            (game) => game.name === gameTitle\n          ),\n        });\n      }\n    );\n  };\n\n  updateCurrentGame = (splits) => {\n    this.setState(\n      {\n        game: Object.assign({}, this.state.game, { splits }),\n      },\n      () => {\n        this.saveData();\n      }\n    );\n  };\n\n  //Header functions\n  changeTitle = (value) => {\n    this.setState({\n      game: Object.assign({}, this.state.game, { name: value }),\n    });\n  };\n  changePlatform = (value) => {\n    this.setState({\n      game: Object.assign({}, this.state.game, { platform: value }),\n    });\n  };\n  changeCategory = (value) => {\n    this.setState({\n      game: Object.assign({}, this.state.game, { category: value }),\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Gamepad\n          onConnect={this.connectHandler}\n          onDisconnect={this.disconnectHandler}\n          onButtonChange={this.buttonChangeHandler}\n        >\n          <></>\n        </Gamepad>\n        <TopBar>\n          <select\n            placeholder=\"Select Game\"\n            disabled={!this.state.currentProfile?.games?.length}\n            onChange={(e) => this.loadData(e.target.value)}\n          >\n            <option selected=\"selected\">Select a Game</option>\n            {this.state.currentProfile?.games?.map((game) => {\n              return <option key={game.name}>{game.name}</option>;\n            })}\n          </select>\n        </TopBar>\n        <GameHeader\n          changeCategory={this.changeCategory}\n          changeTitle={this.changeTitle}\n          changePlatform={this.changePlatform}\n          gamePlatform={this.state.game?.platform || \"\"}\n          gameCategory={this.state.game?.category || \"\"}\n          gameName={this.state.game?.name || \"\"}\n        />\n        <Splits\n          currentProfile={this.state.currentProfile}\n          game={this.state.game}\n          updateCurrentGame={this.updateCurrentGame}\n          globalTime={this.state.globalTime}\n          stopTimers={this.stopTimers}\n          toggleGlobalTimer={this.toggleGlobalTimer}\n          toggleGlobalPause={this.toggleGlobalPause}\n          globalTimerOn={this.state.globalTimerOn}\n          globalTimerPaused={this.state.globalTimerPaused}\n          splits={this.state.game?.splits || [{ id: \"init-split\" }]}\n        />\n        <Timer\n          updateGlobalTime={this.updateGlobalTime}\n          toggleGlobalTimer={this.toggleGlobalTimer}\n          toggleGlobalPause={this.toggleGlobalPause}\n          globalTimerOn={this.state.globalTimerOn}\n          globalTimerPaused={this.state.globalTimerPaused}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}